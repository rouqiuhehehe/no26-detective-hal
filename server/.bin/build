const fs = require('fs');
const path = require('path');
const { execSync, spawnSync } = require('child_process');

const { mode } = getCmdParams();
const env = mode ?? (process.platform === 'win32' ? 'win' : 'linux');
const fileName = process.platform === 'win32' ? 'pkg.cmd' : 'pkg';

const removeOrder = process.platform === 'win32' ? 'rd /s /q' : 'rm -rf';
try {
    fs.accessSync(path.join(process.cwd(), 'dist'));

    execSync(`${removeOrder} dist`, {
        cwd: process.cwd()
    });
} catch (error) {
} finally {
    console.log('run dist');
    execSync('babel src --out-dir dist --extensions ".ts,.js"', {
        cwd: process.cwd()
    });

    try {
        execSync(`${removeOrder} build`, {
            cwd: process.cwd()
        });
    } catch (error) {
    } finally {
        console.log('run build');
        console.log(fileName, ['-t', env, 'package.json']);
        const worker = spawnSync(fileName, ['-t', env, 'package.json'], {
            cwd: process.cwd(),
            stdio: [0, 1, 2]
        });

        console.log('copy file');

        copyDir('key');
        copyDir('uploads');
        copyDir('config');

        console.log('copy env');
        copyEnv();

        console.log('delete dist');
        execSync(`${removeOrder} dist`, {
            cwd: process.cwd()
        });

        console.log('finished');
    }
}

function copyDir(dirPath) {
    try {
        fs.mkdirSync(path.join(process.cwd(), 'build', dirPath));

        const keys = fs.readdirSync(path.join(process.cwd(), dirPath));

        keys.forEach((v) => {
            const copiedPath = path.join(process.cwd(), dirPath, v);
            const stat = fs.statSync(copiedPath);
            if (stat.isFile()) {
                fs.copyFileSync(copiedPath, path.join(process.cwd(), 'build', dirPath, v));
            } else {
                copyDir(path.join(dirPath, v));
            }
        });
    } catch (e) {
        console.log(e);
    }
}

function copyEnv() {
    const reg = /\.env(\.production|\.local)$/;

    const keys = fs.readdirSync(process.cwd());

    keys.forEach((v) => {
        if (reg.test(v)) {
            const copiedPath = path.join(process.cwd(), v);
            fs.copyFileSync(copiedPath, path.join(process.cwd(), 'build', v));
        }
    });
}
function getCmdParams() {
    const params = process.argv.splice(2);
    const paramsObj = {};
    for (const item of params) {
        const format = item.slice(2);
        const paramsArr = format.split('=');
        paramsObj[paramsArr[0]] = paramsArr[1];
    }

    return paramsObj;
}
